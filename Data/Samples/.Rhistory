}
plot(X,Y,col='red',type='l')
c<-0.25
inter_ver<-function(x){
value<-exp(log_ver(x))/exp(log_ver(emv_theta$root))-c
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
n<-rep(5,10)
x<-c(0,0,0,0,1,2,3,3,5,5)
log_ver<-function(theta){
p<-exp(-theta/(2.0^c(1:length(x)-1)))
value<-(n-x)*log(1-p)+x*log(p)
return(sum(value))
}
score_fun<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-(n*p-x)/(a*(1-p))
return(sum(value))
}
emv_theta=uniroot(score_fun,c(10,100))
print(emv_theta$root)
X<-seq(10,60,1)
Y<-seq(10,60,1)
for(i in 1:length(X)){
Y[i]<-exp(log_ver(X[i]))
}
plot(X,Y,col='red',type='l')
c<-0.25
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-c
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
c<-0.25
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(c)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
c<-0.25
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(c)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
c<-0.25
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(c)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
c<-0.25
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(c)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
print(emv_theta$root)
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
inter_ver(emv_theta$root)
log(0.25)
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(16,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(-16,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(-16,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(6,56))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(10,60))
inter_ver(10)
inter_ver(60)
inter_ver(100)
inter_ver(40)
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver<-uniroot(inter_ver,c(10,40))
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver_1<-uniroot(inter_ver,c(10,40))
I_ver_2<-uniroot(inter_ver,c(40,60))
print(I_ver_1$root)
print(I_ver_2$root)
var<-1.0/Fisher_ob(emv_theta$root)
Fisher_obs<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-p*(n-x)/(a^2*(1-p)^2)
return(sum(value))
}
var<-1.0/Fisher_obs(emv_theta$root)
print(var)
print(1.0/0.01225)
var_emv<-1.0/Fisher_obs(emv_theta$root)
sd_emv<-sqrt(var_emv)
print(sd_emv)
n<-rep(5,10)
x<-c(0,0,0,0,1,2,3,3,5,5)
log_ver<-function(theta){
p<-exp(-theta/(2.0^c(1:length(x)-1)))
value<-(n-x)*log(1-p)+x*log(p)
return(sum(value))
}
score_fun<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-(n*p-x)/(a*(1-p))
return(sum(value))
}
emv_theta=uniroot(score_fun,c(10,100))
print(emv_theta$root)
X<-seq(10,60,1)
Y<-seq(10,60,1)
for(i in 1:length(X)){
Y[i]<-exp(log_ver(X[i]))
}
plot(X,Y,col='red',type='l')
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver_1<-uniroot(inter_ver,c(10,40))
I_ver_2<-uniroot(inter_ver,c(40,60))
print(I_ver_1$root)
print(I_ver_2$root)
Fisher_obs<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-p*(n-x)/(a^2*(1-p)^2)
return(sum(value))
}
var_emv<-1.0/Fisher_obs(emv_theta$root)
sd_emv<-sqrt(var_emv)
print(sd_emv)
sd_emv<-sqrt(var_emv)
var_emv<-1.0/Fisher_obs(emv_theta$root)
sd_emv<-sqrt(var_emv)
print(var_emv)
alpha=0.05
z<-qnorm(1.0-alpha/2)
alpha=0.05
z<-qnorm(1.0-alpha/2)
CI_asin<-c(emv_theta$root-z*sd_emv,emv_theta$root+z*sd_emv)
print(CI_asin)
I_ver<-c(I_ver_1$root,I_ver_2$root)
I_ver<-c(I_ver_1$root,I_ver_2$root)
print(I_ver)
plot(X,Y,col='red',type='l')
segment(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),lab='I Verosimilitud',col='blue',lty='dashed')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),lab='I Verosimilitud',col='blue',lty='dashed')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
segments(CI_asin[1],exp(log_ver(CI_asin[1])),CI_asin[2],exp(log_ver(CI_asin[2])),col='green',lty='dashed')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed',legend='a')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed',title='a')
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(legend=c(10,1,'Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1])),I_ver[2],exp(log_ver(I_ver[2])),col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
ver_emv<-exp(log_ver(emv_theta$root))
Y<-Y/ver_emv
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
ver_emv<-exp(log_ver(emv_theta$root))
Y<-Y/ver_emv
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
points(x=emv_theta$root,y=0.25,pch=3)
ver_emv<-exp(log_ver(emv_theta$root))
Y<-Y/ver_emv
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
points(x=emv_theta$root,y=0.25)
ver_emv<-exp(log_ver(emv_theta$root))
Y<-Y/ver_emv
plot(X,Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
#points(x=emv_theta$root,y=0.25)
X<-seq(10,60,1)
Y<-seq(10,60,1)
for(i in 1:length(X)){
Y[i]<-exp(log_ver(X[i]))
}
plot(X,Y,col='red',type='l')
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver_1<-uniroot(inter_ver,c(10,40))
I_ver_2<-uniroot(inter_ver,c(40,60))
I_ver<-c(I_ver_1$root,I_ver_2$root)
print(I_ver)
Fisher_obs<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-p*(n-x)/(a^2*(1-p)^2)
return(sum(value))
}
var_emv<-1.0/Fisher_obs(emv_theta$root)
sd_emv<-sqrt(var_emv)
print(var_emv)
alpha=0.05
z<-qnorm(1.0-alpha/2)
CI_asin<-c(emv_theta$root-z*sd_emv,emv_theta$root+z*sd_emv)
print(CI_asin)
ver_emv<-exp(log_ver(emv_theta$root))
new_Y<-Y/ver_emv
plot(X,new_Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
#points(x=emv_theta$root,y=0.25)
ver_emv<-exp(log_ver(emv_theta$root))
new_Y<-Y/ver_emv
plot(X,new_Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
points(x=emv_theta$root,y=0.25)
print(I_ver[2]-I_ver[1])
print(CI_asin[2]-CI_asin[1])
emv_p<-exp(-emv_theta$root)
print(emv_p)
rv_bin<-rbinom(n=50,1,p=emv_p)
rv_bin<-rbinom(n=50,1,p=emv_p)
print(count(rv_bin,0))
rv_bin<-rbinom(n=50,1,p=emv_p)
print(length(rv_bin[rv_bin==0]))
x=rnorm(n=10000) # Simular 10,000 normales
y_generado=exp(x) # Obtener la trasnformacion
y=seq(0.01,10,by=0.05)
pdf_=(1)/sqrt(2*pi)*exp((-1/2)*(log(y))**2)*(1/y) # Densidad obtenida por cambio de variable
hist(y_generado,breaks=1000,probability = T,xlim = c(0,15)) # histograma de y_generado
lines(y,pdf_,col='blue',lwd=3) # Densidad
n<-rep(5,10)
x<-c(0,0,0,0,1,2,3,3,5,5)
log_ver<-function(theta){
p<-exp(-theta/(2.0^c(1:length(x)-1)))
value<-(n-x)*log(1-p)+x*log(p)
return(sum(value))
}
score_fun<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-(n*p-x)/(a*(1-p))
return(sum(value))
}
emv_theta=uniroot(score_fun,c(10,100))
print(emv_theta$root)
X<-seq(10,60,1)
Y<-seq(10,60,1)
for(i in 1:length(X)){
Y[i]<-exp(log_ver(X[i]))
}
plot(X,Y,col='red',type='l')
inter_ver<-function(x){
value<-log_ver(x)-log_ver(emv_theta$root)-log(0.25)
return(value)
}
I_ver_1<-uniroot(inter_ver,c(10,40))
I_ver_2<-uniroot(inter_ver,c(40,60))
I_ver<-c(I_ver_1$root,I_ver_2$root)
print(I_ver)
Fisher_obs<-function(theta){
a<-2.0^c(1:length(x)-1)
p<-exp(-theta/a)
value<-p*(n-x)/(a^2*(1-p)^2)
return(sum(value))
}
var_emv<-1.0/Fisher_obs(emv_theta$root)
sd_emv<-sqrt(var_emv)
print(var_emv)
alpha=0.05
z<-qnorm(1.0-alpha/2)
CI_asin<-c(emv_theta$root-z*sd_emv,emv_theta$root+z*sd_emv)
print(CI_asin)
ver_emv<-exp(log_ver(emv_theta$root))
new_Y<-Y/ver_emv
plot(X,new_Y,col='red',type='l')
segments(I_ver[1],exp(log_ver(I_ver[1]))/ver_emv,I_ver[2],exp(log_ver(I_ver[2]))/ver_emv,col='blue',lty='dashed')
abline(v=CI_asin,col='green',lty='dashed')
legend(10,1,legend=c('Verosimilitud','Confianza'),col=c('blue','green'),lty=2:2)
points(x=emv_theta$root,y=0.25)
print(I_ver[2]-I_ver[1])
print(CI_asin[2]-CI_asin[1])
emv_p<-exp(-emv_theta$root)
print(emv_p)
rv_bin<-rbinom(n=50,1,p=emv_p)
print(length(rv_bin[rv_bin==0]))
rv_bin<-rbinom(n=50,10,p=emv_p)
#print(length(rv_bin[rv_bin==0]))
rv_bin<-rbinom(n=50,10,p=emv_p)
#print(length(rv_bin[rv_bin==0]))
rv_bin<-rbinom(n=50,size=10,p=emv_p)
#print(length(rv_bin[rv_bin==0]))
rv_bin<-rbinom(n=50,size=10,p=emv_p)
#print(length(rv_bin[rv_bin==0]))
rv_bin<-rbinom(n=50,size=10,p=emv_p)
#print(length(rv_bin[rv_bin==0]))
library(ismev)  #Donde viene el método de exceso sobre un umbral
library(fitdistrplus) #El conjunto de datos
library(mgcv)
library(nlme)
library(MASS)
library(survival)
# Calculo de la proyeccion
set.seed(1)
#setwd("~/Escritorio/Proyecto SNI 2022/Generalized Gompertz/Data/Samples")
file1='NUEVO LEÓN_kde_sample_omicron_trun.csv'
data<- read.csv(file = file1)
#data<-subset(data, tiempo>umbral)
tiempo=unlist(data['tiempo'])
hist(tiempo,type="l") # Grafica para valorar independencia
tiempo=sort(tiempo,decreasing=FALSE)
#tiempo=tiempo[tiempo<40]
umbral=20
tiempo=tiempo[tiempo>umbral]
E=function(u,y){
z=y[y>u]
zz=length(z)
e=(1/zz)*sum(y[y>u]-u)
return(e)
}
N=length(tiempo)
EE=seq(0.0,1.0,by=1.0/(N-1))
for(i in 1:N){
EE[i]=E(tiempo[i],tiempo)[1]
}
plot(tiempo,EE,type="l",col="red",xlim=c(umbral,umbral+120)) #Funcion Media de Excesos
plot(tiempo,EE/tiempo,type="l",col="blue",xlim=c(umbral,umbral+120)) #Identificar un posible dominio de atracción.
umbral_excess=25 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-3,umbral_excess+3) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
setwd("~/Escritorio/Proyecto SNI 2022/Generalized Gompertz/code Gompertz Mixture (3)/Data/Samples")
library(ismev)  #Donde viene el método de exceso sobre un umbral
library(fitdistrplus) #El conjunto de datos
library(mgcv)
library(nlme)
library(MASS)
library(survival)
# Calculo de la proyeccion
set.seed(1)
#setwd("~/Escritorio/Proyecto SNI 2022/Generalized Gompertz/Data/Samples")
file1='NUEVO LEÓN_kde_sample_omicron_trun.csv'
data<- read.csv(file = file1)
#data<-subset(data, tiempo>umbral)
tiempo=unlist(data['tiempo'])
hist(tiempo,type="l") # Grafica para valorar independencia
tiempo=sort(tiempo,decreasing=FALSE)
#tiempo=tiempo[tiempo<40]
umbral=20
tiempo=tiempo[tiempo>umbral]
E=function(u,y){
z=y[y>u]
zz=length(z)
e=(1/zz)*sum(y[y>u]-u)
return(e)
}
N=length(tiempo)
EE=seq(0.0,1.0,by=1.0/(N-1))
for(i in 1:N){
EE[i]=E(tiempo[i],tiempo)[1]
}
plot(tiempo,EE,type="l",col="red",xlim=c(umbral,umbral+120)) #Funcion Media de Excesos
plot(tiempo,EE/tiempo,type="l",col="blue",xlim=c(umbral,umbral+120)) #Identificar un posible dominio de atracción.
umbral_excess=25 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-3,umbral_excess+3) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=35 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-3,umbral_excess+3) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=30 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-3,umbral_excess+3) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=32 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-2,umbral_excess+2) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=28 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-2,umbral_excess+2) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=25 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-2,umbral_excess+2) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=20 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-2,umbral_excess+2) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=22 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-2,umbral_excess+2) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=21 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-1.5,umbral_excess+1.5) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
umbral_excess=21 # Nuevo Leon
u_proportion=length(tiempo[tiempo>umbral_excess])/N #Candidato para estimar los parámetros de la DGVE
u_size=length(tiempo[tiempo>umbral_excess])
max(tiempo)
gpd.fitrange(tiempo,umbral_excess-1,umbral_excess+1) #Calcular los estimadores de la DGVE utilizando Pickands-Haan
#En lo anterior buscamos estabilidad del estimador
estimadores=gpd.fit(tiempo,umbral_excess) #Para estimar dado el umbral
gpd.diag(estimadores) #La graficas de diagnostico
